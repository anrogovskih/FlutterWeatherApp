// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart';
import 'package:flutter_weather_app/network/dto/forecast_response_entity.dart';
import 'package:flutter_weather_app/network/dto/geocoding_result_entity.dart';
import 'package:flutter_weather_app/network/dto/weather_entity.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);

class JsonConvert {
	static final Map<String, JsonConvertFunction> _convertFuncMap = {
		(ForecastResponseEntity).toString(): ForecastResponseEntity.fromJson,
		(ForecastResponseList).toString(): ForecastResponseList.fromJson,
		(WeatherMain).toString(): WeatherMain.fromJson,
		(WeatherWeather).toString(): WeatherWeather.fromJson,
		(WeatherClouds).toString(): WeatherClouds.fromJson,
		(WeatherWind).toString(): WeatherWind.fromJson,
		(ForecastResponseCity).toString(): ForecastResponseCity.fromJson,
		(ForecastResponseCityCoord).toString(): ForecastResponseCityCoord.fromJson,
		(GeocodingResultEntity).toString(): GeocodingResultEntity.fromJson,
		(GeocodingResultLocalNames).toString(): GeocodingResultLocalNames.fromJson,
		(WeatherEntity).toString(): WeatherEntity.fromJson,
		(WeatherCoord).toString(): WeatherCoord.fromJson,
		(WeatherWeather).toString(): WeatherWeather.fromJson,
		(WeatherMain).toString(): WeatherMain.fromJson,
		(WeatherWind).toString(): WeatherWind.fromJson,
		(WeatherClouds).toString(): WeatherClouds.fromJson,
		(WeatherSys).toString(): WeatherSys.fromJson,
	};

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
    final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }
      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type == "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type == "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else if (type == "Map" || type.startsWith("Map<")) {
        return value as T;
      } else {
        if (_convertFuncMap.containsKey(type)) {
          return _convertFuncMap[type]!(value) as T;
        } else {
          throw UnimplementedError('$type unimplemented');
        }
      }
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

	//list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<ForecastResponseEntity>[] is M){
			return data.map<ForecastResponseEntity>((Map<String, dynamic> e) => ForecastResponseEntity.fromJson(e)).toList() as M;
		}
		if(<ForecastResponseList>[] is M){
			return data.map<ForecastResponseList>((Map<String, dynamic> e) => ForecastResponseList.fromJson(e)).toList() as M;
		}
		if(<WeatherMain>[] is M){
			return data.map<WeatherMain>((Map<String, dynamic> e) => WeatherMain.fromJson(e)).toList() as M;
		}
		if(<WeatherWeather>[] is M){
			return data.map<WeatherWeather>((Map<String, dynamic> e) => WeatherWeather.fromJson(e)).toList() as M;
		}
		if(<WeatherClouds>[] is M){
			return data.map<WeatherClouds>((Map<String, dynamic> e) => WeatherClouds.fromJson(e)).toList() as M;
		}
		if(<WeatherWind>[] is M){
			return data.map<WeatherWind>((Map<String, dynamic> e) => WeatherWind.fromJson(e)).toList() as M;
		}
		if(<ForecastResponseCity>[] is M){
			return data.map<ForecastResponseCity>((Map<String, dynamic> e) => ForecastResponseCity.fromJson(e)).toList() as M;
		}
		if(<ForecastResponseCityCoord>[] is M){
			return data.map<ForecastResponseCityCoord>((Map<String, dynamic> e) => ForecastResponseCityCoord.fromJson(e)).toList() as M;
		}
		if(<GeocodingResultEntity>[] is M){
			return data.map<GeocodingResultEntity>((Map<String, dynamic> e) => GeocodingResultEntity.fromJson(e)).toList() as M;
		}
		if(<GeocodingResultLocalNames>[] is M){
			return data.map<GeocodingResultLocalNames>((Map<String, dynamic> e) => GeocodingResultLocalNames.fromJson(e)).toList() as M;
		}
		if(<WeatherEntity>[] is M){
			return data.map<WeatherEntity>((Map<String, dynamic> e) => WeatherEntity.fromJson(e)).toList() as M;
		}
		if(<WeatherCoord>[] is M){
			return data.map<WeatherCoord>((Map<String, dynamic> e) => WeatherCoord.fromJson(e)).toList() as M;
		}
		if(<WeatherWeather>[] is M){
			return data.map<WeatherWeather>((Map<String, dynamic> e) => WeatherWeather.fromJson(e)).toList() as M;
		}
		if(<WeatherMain>[] is M){
			return data.map<WeatherMain>((Map<String, dynamic> e) => WeatherMain.fromJson(e)).toList() as M;
		}
		if(<WeatherWind>[] is M){
			return data.map<WeatherWind>((Map<String, dynamic> e) => WeatherWind.fromJson(e)).toList() as M;
		}
		if(<WeatherClouds>[] is M){
			return data.map<WeatherClouds>((Map<String, dynamic> e) => WeatherClouds.fromJson(e)).toList() as M;
		}
		if(<WeatherSys>[] is M){
			return data.map<WeatherSys>((Map<String, dynamic> e) => WeatherSys.fromJson(e)).toList() as M;
		}

		debugPrint("${M.toString()} not found");
	
		return null;
}

	static M? fromJsonAsT<M>(dynamic json) {
		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return jsonConvert.asT<M>(json);
		}
	}
}